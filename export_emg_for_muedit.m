function signal = export_emg_for_muedit(data, fsamp, nChan, ngrid, gridname, muscle, target, path, options)
%EXPORT_EMG_FOR_MUEDIT  export_emg_for_muedit(data, fsamp, nChan, ngrid, gridname, muscle) Exports matfile for MUedit app. 
%
% Syntax:
%   signal = export_emg_for_muedit(data, fsamp, nChan, ngrid, gridname, muscle);
%   signal = export_emg_for_muedit( __ , target, path, 'Name', value, ...);
%   
% Inputs:
%     data (:,:) double % nChan x time array of sample data
%     fsamp (1,1) double % Sample rate
%     nChan (1,1) double % Number of recorded channels
%     ngrid (1,1) double % Number of grids/arrays used to record EMG signals
%     gridname (1,:) cell {mustBeMember(gridname, {'GR04MM1305', 'ELSCH064NM2', 'GR08MM1305', 'GR10MM0808', 'intraarrays40', 'intraarrays16', 'TMSiTextile48L', 'TMSiGrid8x8'})} % Cell array with the name of each grid. Must be one of: 'GR04MM1305', 'ELSCH064NM2', 'GR08MM1305', 'GR10MM0808', 'intraarrays40', 'intraarrays16', 'TMSiTextile48L', 'TMSiGrid8x8'
%     muscle (1,:) cell % Cell array with the names of the muscles
%     target (1,:) double = nan(1,0) % Contains a reference force/torque target (or other sync indicator), which is the "instructed" sequence
%     path (1,:) double = nan(1,0) % Contains the *actual* force/torque (or other sync indicator) generated by the subject
%
% Options:
%     'File' {mustBeTextScalar} = '' % Name of the file to generate
%     'Save' (1,1) logical = false % Set true to save the file
%
% Output:
%   signal - Data struct for MUedit - see User Manual for details.
%
% See also: MUedit, formatsignalHDEMG

arguments
    data (:,:) double % nChan x time array of sample data
    fsamp (1,1) double % Sample rate
    nChan (1,1) double % Number of recorded channels
    ngrid (1,1) double % Number of grids/arrays used to record EMG signals
    gridname (1,:) cell {mustBeMember(gridname, {'GR04MM1305', 'ELSCH064NM2', 'GR08MM1305', 'GR10MM0808', 'intraarrays40', 'intraarrays16', 'TMSiTextile48L', 'TMSiGrid8x8'})} % Cell array with the name of each grid. Must be one of: 'GR04MM1305', 'ELSCH064NM2', 'GR08MM1305', 'GR10MM0808', 'intraarrays40', 'intraarrays16', 'TMSiTextile48L', 'TMSiGrid8x8'})}
    muscle (1,:) cell % Cell array with the names of the muscles
    target (1,:) double = nan(1,0) % Contains a reference force/torque target (or other sync indicator), which is the "instructed" sequence
    path (1,:) double = nan(1,0) % Contains the *actual* force/torque (or other sync indicator) generated by the subject
    options.File {mustBeTextScalar} = '' % Name of the file to generate
    options.Save (1,1) logical = false;  % Set true to save the file
end

signal = struct;
signal.data = data;
signal.fsamp = fsamp;
signal.nChan = nChan;
signal.ngrid = ngrid;
signal.gridname = gridname;
signal.muscle = muscle;
if ~isempty(target)
    signal.target = target;
end
if ~isempty(path)
    signal.path = path;
end

if options.Save
    if strlength(options.File) > 0
        fname = options.File;
    else
        defname = sprintf('%04d-%02d-%02d_%dchx%dgrid_MUedit.mat', year(today), month(today), day(today), nChan, ngrid);
        ftitle = 'Save data for MUedit';
        if ~isempty(dir(fullfile(pwd,'MUedit.prj'))) % Then we are in the repo folder
            if exist(fullfile(pwd,'data'), 'dir')==0
                mkdir('data');
            end
            [file,path] = uiputfile('*.mat', ftitle, fullfile(pwd,'data',defname));
        else
            [file,path] = uiputfile('*.mat', ftitle, fullfile(pwd,defname));
        end
        if file == 0
            disp("Canceled save- no file created.");
            return;
        end
        fname = fullfile(path,file);
    end
    save(fname, 'signal', '-v7.3');
end