%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% To get the 2d coordinates of EMG channels over the grid
% To check the EMG signals (automatic or visual)

% Input: 
% signal: row-wise signal
% gridname: name of the OTB grid of electrodes
% check EMG: 1 = Visual checking of EMG channels

% Output:
% coordinates: x and y coordinates of each electrode
% IED: inter electrode distance
% discardChannelsVec: vector of discarded channels after visual checking (1 = discarded channel);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [coordinates, IED, discardChannelsVec, emgtype] = formatsignalHDEMG(signal, gridname, fsamp, checkEMG, nbelectrodes)

% Define the parameters depending on the name of the grid
switch gridname
    case 'GR04MM1305'
        ElChannelMap = ([1 25 26 51 52; ...
                       1 24 27 50 53; ...  
                       2 23 28 49 54; ...
                       3 22 29 48 55; ...
                       4 21 30 47 56; ...
                       5 20 31 46 57; ... 
                       6 19 32 45 58 ; ...
                       7 18 33 44 59; ...
                       8 17 34 43 60; ...
                       9 16 35 42 61; ...
                       10 15 36 41 62; ...
                       11 14 37 40 63; ...
                       12 13 38 39 64]);
        discardChannelsVec = zeros(64,1);
        IED = 4;
        emgtype = 1;
    
    case 'ELSCH064NM2'
        ElChannelMap = ([1 1 2 3 4; ...
               16 8 7 6 5; ...
               15 14 13 12 11; ...
               19 18 17  9 10; ... 
               20 21 22 23 24; ...
               28 29 30 31 32; ...
               25 26 27 33 34; ...
               35 36 37 38 39; ...
               45 46 47 48 40; ...
               44 43 42 41 49; ...
               54 53 52 51 50; ...
               55 56 64 63 62; ...
               57 58 59 60 61]);
        discardChannelsVec = zeros(64,1);
        IED = 8;
        emgtype = 1;
    
    case 'GR08MM1305'
        ElChannelMap = ([1 25 26 51 52; ...
                       1 24 27 50 53; ...
                       2 23 28 49 54; ...
                       3 22 29 48 55; ...
                       4 21 30 47 56; ...
                       5 20 31 46 57; ... 
                       6 19 32 45 58 ; ...
                       7 18 33 44 59; ...
                       8 17 34 43 60; ...
                       9 16 35 42 61; ...
                       10 15 36 41 62; ...
                       11 14 37 40 63; ...
                       12 13 38 39 64]); 
        discardChannelsVec = zeros(64,1);
        IED = 8;
        emgtype = 1;
    
    case 'GR10MM0808'
        ElChannelMap = ([8 16 24 32 40 48 56 64; ...
                       7 15 23 31 39 47 55 63; ...
                       6 14 22 30 38 46 54 62; ...
                       5 13 21 29 37 45 53 61; ...
                       4 12 20 28 36 44 52 60; ...
                       3 11 19 27 35 43 51 59; ... 
                       2 10 18 26 34 42 50 58; ...
                       1 9 17 25 33 41 49 57]);
        discardChannelsVec = zeros(64,1);
         IED = 10;
         emgtype = 1;
     
    case 'intraarrays40'
         ElChannelMap = ([1 11 21 31; ...
                       2 12 22 32; ...  
                       3 13 23 33; ...
                       4 14 24 34; ...
                       5 15 25 35; ...
                       6 16 26 36; ... 
                       7 17 27 37; ...
                       8 18 28 38; ...
                       9 19 29 39; ...
                       10 20 30 40]);
         discardChannelsVec = zeros(40,1);
        IED = 1;
        emgtype = 2;
             
    case 'intraarrays16'
         ElChannelMap = ([1 9; ...
                       2 10; ...  
                       3 11; ...
                       4 12; ...
                       5 13; ...
                       6 14; ... 
                       7 15; ...
                       8 16]);
         discardChannelsVec = zeros(16,1);
        IED = 1;
        emgtype = 2;
		
	case 'TMSiTextile48L'
		ElChannelMap = [ 8,  7,  6,  5,  4,  3,  2,  1;
						14, 15, 16, 13, 12, 11, 10,  9;
						19, 18, 17, 20, 21, 22, 23, 24;
						25, 26, 27, 28, 29, 30, 31, 32 ];
		discardChannelsVec = zeros(32,1);
		IED = 8.75;
		emgtype = 1;
	case 'TMSiGrid8x8'
		ElChannelMap = flipud(reshape(1:64, 8, 8));
		discardChannelsVec = zeros(64,1);
		IED = 8.75;
		emgtype = 1;
end

for r=1:size(ElChannelMap,1) % electrode array 1
    for c=1:size(ElChannelMap,2)
        coordinates(ElChannelMap(r,c),1) = r;
        coordinates(ElChannelMap(r,c),2) = c;
    end
end

% Notch filter and bandpassfilter before visualization
signal = notchsignals(signal,fsamp);

% Visual checking of EMG signals by column
if checkEMG == 1
    ch=1;
    for c = 1:size(ElChannelMap,2)
        figure;
        lincol = colormap(turbo(size(ElChannelMap,1)));
        for r = 1:size(ElChannelMap,1)
            if ch < length(discardChannelsVec) + 1
                plot(signal(ch,:)/max(signal(ch,:)) + r, 'Color', lincol(r,:), 'LineWidth', 1)
                grid on
                hold on
                ylim([0 size(ElChannelMap,1)+1])
                ch = ch+1;
            end
        end
        title(['Column#' num2str(c)], 'Color', [0.9412 0.9412 0.9412], 'FontName', 'Avenir Next', 'FontSize', 20)
        xlabel('Time (s)', 'FontName', 'Avenir Next', 'FontSize', 20)
        ylabel('Row #', 'FontName', 'Avenir Next', 'FontSize', 20)
        set(gcf,'Color', [0.5 0.5 0.5]);
        set(gcf,'units','normalized','outerposition',[0 0 1 1])
        set(gca,'Color', [0.5 0.5 0.5], 'XColor', [0.9412 0.9412 0.9412], 'YColor', [0.9412 0.9412 0.9412]);
        discchan = inputdlg('Enter the number of discarded channels (Enter space-separated numbers):');
        
        if ~isnan(str2num(discchan{1}))
            discardChannelsVec(str2num(discchan{1}) + (c-1)*size(ElChannelMap,1)) = 1;
        end
        close;
    end
    if length(discardChannelsVec) == 65
        discardChannelsVec = discardChannelsVec(1:end-1);
    end
else
    discardChannelsVec = zeros(nbelectrodes,1);
end  
end
